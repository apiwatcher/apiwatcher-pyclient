import requests
from exceptions import ApiwatcherClientException

class Client(object):
    """Simple wrapper around python requests solving authentication to
    Apiwatcher platform.
    """

    def __init__(
        self,
        api_host="https://api2.apiwatcher.com",
        api_port=443,
        verify_certificate=True,
        timeout=None
    ):
        """Initialize the client.

        :param api_host: Hostname where Apiwatcher api is running.
        :type api_host: String
        :param api_port: Port where Apiwatcher api is running.
        :type api_port: Integer
        :param verify_certificate: If true, call will fail in case of invalid
        certificate
        :type verify_certificate: Boolean
        :param timeout: Timeout of any single request in seconds
        :type verify_certificate: Number
        """
        if not api_host.startswith("http"):
            api_host = "http://{0}".format(api_host)

        self.base_url = "{0}:{1}".format(api_host, api_port)
        self.auth_data = None
        self.token = None
        self.verify_certificate = verify_certificate
        self.timeout = timeout

    def authorize_client_credentials(
        self, client_id, client_secret=None, scope="private_agent"
    ):
        """Authorize to platform with client credentials

        This should be used if you posses client_id/client_secret pair
        generated by platform.
        """
        self.auth_data = {
            "grant_type": "client_credentials",
            "scope": [ scope ],
            "client_id": client_id,
            "client_secret": client_secret
        }

        self._do_authorize()

    def authorize_password(self, client_id, username, password):
        """Authorize to platform as regular user

        You must provide a valid client_id (same as web application),
        your password and your username. Username and password is not stored in
        client but refresh token is stored. The only valid scope for this
        authorization is "regular_user".

        :param client_id: Valid client_id
        :type client_id: String
        :param username: User email
        :type username: String
        :param password: User password
        :type password: String
        """

        self.auth_data = {
            "grant_type": "password",
            "username": username,
            "password": password,
            "client_id": client_id,
            "scope": ["regular_user"]
        }

        self._do_authorize()

    def _do_authorize(self):
        """ Perform the authorization
        """
        if self.auth_data is None:
            raise ApiwatcherClientException("You must provide authorization data.")

        r = requests.post(
            "{0}/api/token".format(self.base_url), json=self.auth_data,
            verify=self.verify_certificate, timeout=self.timeout
        )

        if r.status_code == 401:
            raise ApiwatcherClientException("Wrong credentials supplied: {0}".format(
                r.json()["message"]
            ))
        elif r.status_code != 201:
            try:
                reason = r.json()["message"]
            except:
                reason = r.text
            raise ApiwatcherClientException(
                "Authorization failed. Reason {0} {1}".format(
                    r.status_code, reason)
                )
        else:
            data = r.json()["data"]
            self.token = data["access_token"]

            if "refresh_token" in data:
                self.auth_data = {
                    "grant_type": "refresh_token",
                    "refresh_token": data["refresh_token"],
                    "client_id": self.auth_data["client_id"]
                }

    def _do_request(self, method, endpoint, data=None):
        """Perform one request, possibly solving unauthorized return code
        """
        # No token - authorize
        if self.token is None:
            self._do_authorize()

        r = requests.request(
            method,
            "{0}{1}".format(self.base_url, endpoint),
            headers={
                "Authorization": "Bearer {0}".format(self.token),
                "Content-Type": "application/json"
            },
            json=data,
            verify=self.verify_certificate,
            timeout=self.timeout
        )

        if r.status_code == 401:
            self._do_authorize()
            r = requests.request(
                method,
                "{0}{1}".format(self.base_url, endpoint),
                headers={
                    "Authorization": "Bearer {0}".format(self.token),
                    "Content-Type": "application/json"
                },
                json=data,
                verify=self.verify_certificate,
                timeout=self.timeout
            )

        return r

    def get(self, endpoint):
        """ Calls HTTP GET request and returns response like requests

        :param endpoint: Where to call the request
        :type endpoint: String
        """
        return self._do_request("get", endpoint)

    def post(self, endpoint, data=None):
        """ Calls HTTP POST request and returns response like requests

        :param endpoint: Where to call the request
        :type endpoint: String
        :param data: Data to be send
        :type data: Dictionary or array (must be JSON serializable)
        """
        return self._do_request("post", endpoint, data)

    def put(self, endpoint, data=None):
        """ Calls HTTP PUT request and returns response like requests

        :param endpoint: Where to call the request
        :type endpoint: String
        :param data: Data to be send
        :type data: Dictionary or array (must be JSON serializable)
        """
        return self._do_request("put", endpoint, data)

    def delete(self, endpoint):
        """ Calls HTTP DELETE request and returns response like requests

        :param endpoint: Where to call the request
        :type endpoint: String
        """
        return self._do_request("delete", endpoint)
